#!/usr/bin/python3

import configparser
import os
from subprocess import Popen, PIPE, DEVNULL

def main():
	config = configparser.ConfigParser()
	try:
		config.read('/etc/dbbackup.conf')
	except:
		pass

	if config.getboolean('mysql', 'enabled', fallback=False):
		backup_databases('MySQL', config['mysql'])

	if config.getboolean('postgresql', 'enabled', fallback=False):
		backup_databases('PostgreSQL', config['postgresql'])

def backup_databases(type, config):
	if type == 'MySQL':
		cmd = ['mysql', '-BNe', 'SHOW DATABASES']
	else:
		cmd = ['su', '-', 'postgres', '-c', 'psql -Atc \'SELECT datname FROM pg_database WHERE NOT datistemplate AND datallowconn\'']
	p = Popen(cmd, stdout=PIPE)
	databases = p.communicate()[0].decode().strip().split()
	skipdatabases = [x.strip() for x in config['skipdatabases'].split(',')]
	databases = sorted(set(databases) - set(skipdatabases))

	exclude_tables = {}
	if len(config['skiptables']) != 0:
		skiptables = [x.strip() for x in config['skiptables'].split(',')]
		for table in skiptables:
			name = table.split('.', 1)
			if name[0] not in exclude_tables:
				exclude_tables[name[0]] = []
			exclude_tables[name[0]].append(name[1])

	if len(databases) != 0:
		print('Backing up {} databases'.format(type))
		for database in databases:
			excl_tables = exclude_tables[database] if database in exclude_tables else []
			skiptables = ''
			if len(excl_tables) != 0:
				skiptables += ' (excluding table'
				if len(excl_tables) != 1:
					skiptables += 's'
				skiptables += ' {})'.format(', '.join(excl_tables))
			print(' - {}{}'.format(database, skiptables))

			if type == 'MySQL':
				cmd = ['mysqldump', '--routines', '--skip-dump-date']
				for table in excl_tables:
					cmd.append('--ignore-table={}.{}'.format(database, table))
				cmd.append(database)
			else:
				sucmd = ['pg_dump']
				for table in excl_tables:
					sucmd.append('--exclude-table-data={}'.format(table))
				sucmd.append(database)
				cmd = ['su', '-', 'postgres', '-c', ' '.join(sucmd)]
			p1 = Popen(cmd, stdout=PIPE)
			target_filename = os.path.join(config['target'], '{}.sql.gz'.format(database))
			with open(target_filename, 'wb') as target_file:
				p2 = Popen(['gzip', '-c', '-9'], stdin=p1.stdout, stdout=target_file)
				p1.stdout.close()
				p2.communicate()

	old_backups = [x[:-7] for x in os.listdir(config['target']) if x.endswith('.sql.gz')]
	old_backups = list(set(old_backups) - set(databases))
	if len(old_backups) != 0:
		print('Removing obsolete {} database backups'.format(type))
		for old_backup in old_backups:
			print(' - {}'.format(old_backup))
			os.remove(os.path.join(config['target'], '{}.sql.gz'.format(old_backup)))

if __name__ == '__main__':
	main()
